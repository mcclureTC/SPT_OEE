<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Component_TwinSAFE_Monitor" Id="{b5791ce2-ba91-46d4-a32a-5a69ca7bba18}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Component_TwinSAFE_Monitor EXTENDS CommonComponent
VAR
	//Alarms
	TwinSAFE_Alarms : ARRAY[1..ALARM_COUNT] OF FB_TcAlarm;
END_VAR

VAR CONSTANT
	ALARM_COUNT : INT := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="I_CyclicLogic" Id="{133d6343-9c19-4212-93d6-d47895a6187c}" />
    <Folder Name="Methods" Id="{f33808e5-686a-4877-ba06-021e841cd31a}" />
    <Method Name="CreateEvents" Id="{f4dae6a0-662a-4b6b-88f4-80facb966b8a}" FolderPath="Methods\">
      <Declaration><![CDATA[//! @summary Initializes event function blocks using this components's name
METHOD PROTECTED CreateEvents

//! @description This method is called by <c>Initialize()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here

(*F_CreateAllEventsInClass(Alarms		:= StackLightAlarm,
						 ClassSize	:= SIZEOF(TC_EVENTS.FestoServo),
						 pInitEvent := ADR(TC_EVENTS.FestoServo.InitReferenceEvent),
						 Prefix		:= _Name);*)

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{8cd9d87b-2623-495e-94f8-5f717c9b993e}" FolderPath="I_CyclicLogic\">
      <Declaration><![CDATA[//! @summary This method serves as the entry point for all underlying FB logic
METHOD PUBLIC CyclicLogic

//! @description This method should be called cyclically by descendant function blocks by invoking <c>SUPER^.CyclicLogic()</c>.  Alternatively, the contents of this method could be reimplemented entirely in which case a call to this method would not be necessary.]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CyclicLogic();

(* Update alarm severity from this component *)
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := TwinSAFE_Alarms, CurrentSeverity := _CurrentAlarmSeverity);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitoring" Id="{f3266958-5bd6-4fbf-a715-a8c77daf4a1d}" FolderPath="I_CyclicLogic\">
      <Declaration><![CDATA[//! Provides basic error detection and event handling for this component
METHOD PROTECTED Monitoring

(*! @descriptionThis method is called cyclically by <c>CyclicLogic()</c>*)
VAR
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Error AND NOT TwinSAFE_Alarms[2].bRaised THEN
	RaiseAlarm2Args(TwinSAFE_Alarms[2], CONCAT('Error ID: ', TO_STRING(_ErrorID)), '');
END_IF

_Busy	 := _Busy;
_Error	 := _CurrentAlarmSeverity >= TcEventSeverity.Error;
_ErrorID := _ErrorID;
SUPER^.Monitoring();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Component_TwinSAFE_Monitor">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_TwinSAFE_Monitor.CreateEvents">
      <LineId Id="32" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_TwinSAFE_Monitor.CyclicLogic">
      <LineId Id="16" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Component_TwinSAFE_Monitor.Monitoring">
      <LineId Id="159" Count="6" />
      <LineId Id="25" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>