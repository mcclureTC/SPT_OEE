<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_ProcessModule" Id="{d96af9ed-11cd-401e-ba4f-f152e09d6701}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_ProcessModule EXTENDS CommonModule IMPLEMENTS I_ProcessModule
VAR
	//Components
	Axis		: FB_Component_BasicAxis;
	Cylinder	: FB_DoubleSolenoidFeedback;
	fbTON_Press : Ton;

	//
	_CmdProcess : ST_ProcessCommand;
	_StsProcess : ST_ProcessStatus;
	_CfgProcess : ST_ProcessConfig;
	_RcpProcess : ST_ProcessRecipe;

	//Test Vars
	Homed : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Acting" Id="{42f4a3ad-85f3-45b3-8f07-83ed07cd56a1}" />
    <Folder Name="I_CyclicLogic" Id="{eb332f67-cedc-429d-8173-b633e0785ea0}" />
    <Folder Name="I_ProcessModule" Id="{712ce433-ab2c-4131-9dc0-7a7a6175ccc5}" />
    <Folder Name="Initialize" Id="{c1be8122-4a50-419e-9d74-97869289f510}" />
    <Folder Name="Waiting" Id="{d91a74ec-0486-4a10-add1-d11d1d642eb9}" />
    <Method Name="Aborting" Id="{b471fcaf-c3e9-4115-a737-e6f809761d0f}" FolderPath="Acting\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Aborting</b> state
METHOD PROTECTED Aborting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
	AllAxesDone		: BOOL;
END_VAR

(*! <description> <b>Note:</b> The <i>Abort</i> command should be associated with the fault handing routine of a module. It should not be directly commanded from any user inteface. 

<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> <b>ANY</b> </td>
		<td> Abort Command </td> 
		<td> State Complete </td>
		<td> Aborted </td> 
	</tr>
</table>

This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE DescendantSequenceState OF
	0:
		NoStateTasksToComplete	:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		IF _CmdProcess.MoveToAbortPos THEN
			Cylinder.Retract();
		END_IF

		IF Cylinder.Retracted THEN
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	20:
		StateTasksComplete := TRUE;
END_CASE

SUPER^.Aborting();]]></ST>
      </Implementation>
    </Method>
    <Property Name="CfgProcess" Id="{603d759d-9774-424f-a9db-341e23a92804}" FolderPath="I_ProcessModule\">
      <Declaration><![CDATA[PROPERTY CfgProcess : REFERENCE TO ST_ProcessConfig]]></Declaration>
      <Get Name="Get" Id="{c2ca0787-6a55-4b3b-84f7-750ccaf9a31d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CfgProcess REF= _CfgProcess;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CmdProcess" Id="{00493a82-d7c9-48fe-90c8-50d600056aa1}" FolderPath="I_ProcessModule\">
      <Declaration><![CDATA[PROPERTY CmdProcess : REFERENCE TO ST_ProcessCommand]]></Declaration>
      <Get Name="Get" Id="{c75426b8-159c-45a8-884e-5a73fbed7031}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CmdProcess REF= _CmdProcess;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CyclicLogic" Id="{ebe9cbe0-1076-46b3-b50e-668d827dd133}" FolderPath="I_CyclicLogic\">
      <Declaration><![CDATA[METHOD PUBLIC CyclicLogic]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
	_InitComplete := Initialize();
	RETURN;
END_IF

SUPER^.CyclicLogic();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{30f12234-9e08-4159-b1de-b56d6638e8d6}" FolderPath="Waiting\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Execute</b> state
METHOD PROTECTED Execute
(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Starting<b>-or-</b>Unholding <b>-or-</b>Unsuspending</td>
		<td> State Complete<i>(Starting<b>-or-</b>Unholding<b>-or-</b>Unsuspending)</i></td> 
		<td> State Complete<b>-or-</b>Hold Command<b>-or-</b>Suspend Command</td>
		<td> Completing<b>-or-</b>Holding<b>-or-</b>Suspending</td>
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)
VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _CurrentMode OF
	E_PMLCustomMode.Production:
		CASE DescendantSequenceState OF
			0:
				IF _StsProcess.ProductAtReady THEN
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			10:
				IF Axis.MoveVelocity(10.0, 0) THEN
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			20:
				IF _StsProcess.ProductInPos THEN
					Cylinder.Extend();
					fbTON_Press(IN := FALSE);
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			30:
				IF Cylinder.Extended THEN
					fbTON_Press(IN := TRUE, PT := _RcpProcess.RollTime);
				END_IF

				IF fbTON_Press.q THEN
					Cylinder.Retract();
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			40:
				IF Cylinder.Retracted THEN
					Axis.Stop();
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			50:
				IF Axis.Stopped THEN
					_StsProcess.ProcessComplete := TRUE;
					DescendantSequenceState		:= 0;
				END_IF
		END_CASE

	E_PMLCustomMode.Home:
		CASE DescendantSequenceState OF
			0:
				IF _CmdCommon.Home THEN
					Cylinder.Retract();
				END_IF

				IF Cylinder.Retracted THEN
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			10:
				IF _CmdCommon.Home AND NOT _StsCommon.Homed THEN
					_CmdCommon.Home := FALSE;
					Axis.Home();
					DescendantSequenceState := DescendantSequenceState + 10;
				END_IF

			20:
				IF Axis.Axis.Status.Homed THEN
					_StsCommon.Homed := TRUE;
				END_IF
		END_CASE
END_CASE

SUPER^.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{93cb3075-61bd-4250-a711-bd577bfcf00c}" FolderPath="Initialize\">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL
VAR
	i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
	0: //Register Modules

		//Register Components
		RegisterComponent(Axis);
		RegisterComponent(Cylinder);

		//I_CommonModuleBase

		//I_CommonComponent
		ipComponents[1] := Axis;
		ipComponents[2] := Cylinder;

		//Setup Config
		_LogModeChanges			:= FALSE;
		_LogStateChanges		:= FALSE;
		DescendantSequenceState := DescendantSequenceState + 10;

	10:
		// Copy Mode names
		FOR i := 1 TO 10 DO
			ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
		END_FOR

		DescendantSequenceState := DescendantSequenceState + 10;

	20:
		//Initialize_Recipes();
		Cylinder.InSimulation	:= TRUE;
		DescendantSequenceState := DescendantSequenceState + 10;

	30: // Call the Super 
		IF SUPER^.Initialize() THEN
			DescendantSequenceState := DescendantSequenceState + 10;
		END_IF

	40:
		Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="RcpProcess" Id="{d335285e-1ed1-43fb-bb5f-01bd10886edf}" FolderPath="I_ProcessModule\">
      <Declaration><![CDATA[PROPERTY RcpProcess : REFERENCE TO ST_ProcessRecipe]]></Declaration>
      <Get Name="Get" Id="{0abe5b36-7b79-461d-bbcd-8b0ae3815e0c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RcpProcess REF= _RcpProcess;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StsProcess" Id="{58a7f20c-4b32-4951-9b8e-09ba38177378}" FolderPath="I_ProcessModule\">
      <Declaration><![CDATA[PROPERTY StsProcess : REFERENCE TO ST_ProcessStatus]]></Declaration>
      <Get Name="Get" Id="{7fbe06b4-6180-47b6-abee-d3c209c9234a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StsProcess REF= _StsProcess;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="EM_ProcessModule">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.Aborting">
      <LineId Id="72" Count="17" />
      <LineId Id="71" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.CfgProcess.Get">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.CmdProcess.Get">
      <LineId Id="6" Count="1" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.CyclicLogic">
      <LineId Id="11" Count="4" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.Execute">
      <LineId Id="420" Count="67" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.Initialize">
      <LineId Id="148" Count="38" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.RcpProcess.Get">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_ProcessModule.StsProcess.Get">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>